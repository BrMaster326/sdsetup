<!-- Copyright (c) 2018 noahc3
   - This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
@page "/switch"
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@if (!gettingZip) {

<div>

	@if (zipDoneMessage == true) {
		<div class="ui success message">
			<i class="close icon" onclick="@(() => zipDoneMessage = false)"></i>
			<div class="header">
				Operation Completed
			</div>
			<p>Your ZIP file should download within the next few seconds!</p>
		</div>
	}

	<h1 style="text-align:center">Nintendo Switch</h1>

	@if (!G.initialized) {
		<h2>Page is loading, please wait...</h2>
	} else {

		<div class="docs-example">
			<h3>Select your Custom Firmwares</h3>

			<div class="ui three item menu" style="margin-bottom:2rem">
				@foreach (CFW k in G.cfws) {
					<a class="item @(k.enabled == true ? "active" : "")" onclick="@(() => k.enabled = !k.enabled)">@k.name</a>
				}
			</div>
		</div>

		@foreach (CFW k in G.cfws) {
			showOptions = false;
			if (k.enabled && k.options != null) {
				showOptions = true;
			}
		}

		@if (showOptions == true) {
			<div class="docs-example">
				<h3 style="margin-bottom:0.5em">Select Options for your Custom Firmwares</h3>
				<Card CardType="CardType.Deck" Class="justify-content-center">
					@foreach (CFW k in G.cfws) {
						if (k.options != null) {
							<Card style="margin-bottom:2rem">
								<Card CardType="CardType.Body">
									<Card CardType="CardType.Title">@k.name</Card>
									<div class="ui form">
										@foreach (CFWOption n in k.options) {
											<div class="inline field" style="margin:0 0 0 1rem">
												<div class="ui checkbox @(n.enabled == true ? "checked" : "")" onclick="@(() => changeCfwOptionState(n))">
													<input type="checkbox" tabindex="0" class="hidden" checked="@(n.enabled == true)">
													<label>@n.name</label>
												</div>
											</div>
										}
									</div>
								</Card>
							</Card>
						}
					}
				</Card>
			</div>
		}
		<div class="docs-example">
			<h3 style="margin-bottom:0.5em">Select your Homebrew</h3>
			<Card CardType="CardType.Deck" Class="justify-content-center">
				@foreach (KeyValuePair<string, Dictionary<string, List<Package>>> k in G.categories) {
					if (G.autofillBlacklist.Contains(k.Key)) {
						continue;
					}

					<Card style="margin-bottom:2rem">
						<Card CardType="CardType.Body">
							<Card CardType="CardType.Title">@k.Key</Card>
							@foreach (KeyValuePair<string, List<Package>> n in k.Value) {
								<Card CardType="CardType.Subtitle" style="margin-top:0.5rem">@n.Key</Card>
								<div class="ui form">
									@foreach (Package p in n.Value) {
										<div class="inline field" style="margin:0 0 0 1rem">
											<div class="ui checkbox @(G.selectedPackages[p.id] == true ? "checked" : "")" onclick="@(() => checkClicked(p.id))">
												<input type="checkbox" tabindex="0" class="hidden" checked="@(G.selectedPackages[p.id] == true)">
												<label>@p.name@if (!String.IsNullOrEmpty(p.version)) {<sub style="color:#b7b7b7"> (@p.version)</sub>}</label>
											</div>
										</div>
									}
								</div>
							}
						</Card>
					</Card>
				}
			</Card>
		</div>

		<div class="docs-example">
			<h3 style="margin-bottom:0.5em;">Select your Extras</h3>
			<Card CardType="CardType.Deck" Class="justify-content-center">
				<Card style="margin-bottom:2rem">
					<Card CardType="CardType.Body">
						<Card CardType="CardType.Title">PC Tools</Card>
						@foreach (KeyValuePair<string, List<Package>> n in G.categories["pctools"]) {
							<Card CardType="CardType.Subtitle" style="margin-top:0.5rem">@n.Key</Card>
							<div class="ui form">
								@foreach (Package p in n.Value) {
									<div class="inline field" style="margin:0 0 0 1rem">
										<div class="ui checkbox @(G.selectedPackages[p.id] == true ? "checked" : "")" onclick="@(() => checkClicked(p.id))">
											<input type="checkbox" tabindex="0" class="hidden" checked="@(G.selectedPackages[p.id] == true)">
											<label>@p.name@if (!String.IsNullOrEmpty(p.version)) {<sub style="color:#b7b7b7"> (@p.version)</sub>}</label>
										</div>
									</div>
								}
							</div>
						}
					</Card>
				</Card>
				<Card style="margin-bottom:2rem">
					<Card CardType="CardType.Body">
						<Card CardType="CardType.Title">Fusee Payloads</Card>
						@foreach (KeyValuePair<string, List<Package>> n in G.categories["payloads"]) {
							<Card CardType="CardType.Subtitle" style="margin-top:0.5rem">@n.Key</Card>
							<div class="ui form">
								@foreach (Package p in n.Value) {
									<div class="inline field" style="margin:0 0 0 1rem">
										<div class="ui checkbox @(G.selectedPackages[p.id] == true ? "checked" : "")" onclick="@(() => checkClicked(p.id))">
											<input type="checkbox" tabindex="0" class="hidden" checked="@(G.selectedPackages[p.id] == true)">
											<label>@p.name@if (!String.IsNullOrEmpty(p.version)) {<sub style="color:#b7b7b7"> (@p.version)</sub>}</label>
										</div>
									</div>
								}
							</div>
						}
					</Card>
				</Card>
			</Card>
		</div>

		@if (G.isMobile) {
			if (G.selectedPackages.ContainsKey("retronx") && G.selectedPackages["retronx"] == true) {
				<div class="ui negative message" style="margin-bottom:1.5rem">
					<div class="header fluid">
						STOP! Attempting to add RetroNX on mobile <b>WILL FAIL</b> because of it's size and mobile memory limitations. Unselect it!<br />
						(Download it manually or use this site on a PC to get it)
					</div>
				</div>

				<button class="fluid ui red disabled button" style="margin-bottom:1.5rem">Download your ZIP</button>
			} else {
				<button class="fluid ui red button" style="margin-bottom:1.5rem;" onclick="@(() => downloadZip())">Download your ZIP</button>
			}
		} else {
			<button class="fluid ui red button" style="margin-bottom:1.5rem;" onclick="@(() => downloadZip())">Download your ZIP</button>
		}
	}

</div>
} else {
<div class="ui active dimmer" style="height:100%;width:100%">
	<div class="ui massive text loader">
		<div style="margin-bottom:2rem">Downloading your ZIP, please wait...</div>
		@if (barMode == true) {
			<progress Max="@total" Value="@((int)current)"></progress>
			<label style="margin-top:0.5rem">Fetching Files (@current/@total)</label>
		} else {
			<progress Max="100" Value="@((int)current)" Color="Color.Success"></progress>
			<label style="margin-top:0.5rem">Generating Zip File (@current%)</label>
		}
	</div>
	<div class="ui negative message" style="width:90%;position:absolute;bottom:5%">
		<div class="header fluid">
			This might take a while. If the progress stalls for more than a minute, please report it on <a href="https://github.com/noahc3/SDSetup/issues">GitHub</a>
		</div>
	</div>
</div>
}


@functions {

	public static Action ForceUiRefresh;

	public static bool showOptions = false;

	public static bool gettingZip = false;

	private static bool zipDoneMessage = false;

	static int total = 3;
	static double current = 0;
	static bool barMode = true;

	Dictionary<string, Package> packages = new Dictionary<string, Package>();

	protected override async Task OnInitAsync() {
		ForceUiRefresh = new Action(() => StateHasChanged());
	}

	private void checkClicked(string id) {
		G.selectedPackages[id] = !G.selectedPackages[id];
		StateHasChanged();
	}

	private void changeCfwOptionState(CFWOption o) {
		o.enabled = !o.enabled;
		StateHasChanged();
	}




	//TODO: Move this to package

	private Task<int> getAllArtifacts(Package p) {
		return Task.Run<int>(async () => {
			foreach (Artifact a in p.artifacts) {
				FileInfo fi = new FileInfo(a.dir);
				string path = fi.DirectoryName;
				if (path.StartsWith("\\") || path.StartsWith("/")) path = path.Substring(1);
				await ZipHelpers.AddFile(a.url, path, fi.Name);
			}
			return 0;
		});

	}

	private List<Tuple<string, string, string>> getArtifacts(Package p) {
		List<Tuple<string, string, string>> artifacts = new List<Tuple<string, string, string>>();
		foreach (Artifact a in p.artifacts) {
			FileInfo fi = new FileInfo(a.dir);
			string path = fi.DirectoryName;
			if (path.StartsWith("\\") || path.StartsWith("/")) path = path.Substring(1);
			artifacts.Add(new Tuple<string, string, string>(a.url, path, fi.Name));
		}
		return artifacts;
	}

	[JSInvokable]
	public static void ChangeProgress(double val) {
		current = val;
		ForceUiRefresh();
	}

	// due to many issues, this has to go here and not in global :/
	private async void downloadZip() {

		gettingZip = true;
		zipDoneMessage = false;
		barMode = true;
		current = 0;

		List<Tuple<string, string, string>> finalArtifacts = new List<Tuple<string, string, string>>();

		foreach (CFW k in G.cfws) {
			if (k.enabled) {
				switch (k.id) {
					case "sxos":
						finalArtifacts.AddRange(getArtifacts(G.packages["sxos"]));
						break;
					case "atmos":
						finalArtifacts.AddRange(getArtifacts(G.packages["sdfilesswitch"]));
						break;
					case "reinx":
						finalArtifacts.AddRange(getArtifacts(G.packages["reinx"]));
						if (k.options[0].enabled == true) {
							finalArtifacts.AddRange(getArtifacts(G.packages["reinx_nogc"]));
						}
						break;
					default: break;
				}
			}
		}

		foreach (KeyValuePair<string, bool> en in G.selectedPackages) {
			if (!G.autodlBlacklist.Contains(G.packages[en.Key].category) && en.Value == true) {
				finalArtifacts.AddRange(getArtifacts(G.packages[en.Key]));
			}
		}

		total = finalArtifacts.Count;

		foreach (Tuple<string, string, string> k in finalArtifacts) {
			int result = await ZipHelpers.AddFile(k.Item1, k.Item2, k.Item3);
			if (result == 2) {
				Console.WriteLine("File download failed, aborting...");
				gettingZip = false;
				zipDoneMessage = true;
				StateHasChanged();
				return;
			}
			current++;
			StateHasChanged();
		}

		barMode = false;
		current = 0;
		StateHasChanged();

		await ZipHelpers.AwaitableDownloadZip();
		gettingZip = false;
		zipDoneMessage = true;
		StateHasChanged();



	}
}
