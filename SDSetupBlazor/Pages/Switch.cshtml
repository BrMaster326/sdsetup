<!-- Copyright (c) 2018 noahc3
   - This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
@page "/switch"
@inject HttpClient Http
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper


@if (!gettingZip) {

<div>

	@if (zipDoneMessage == true) {
		<div class="ui success message">
			<i class="close icon" onclick="@(() => zipDoneMessage = false)"></i>
			<div class="header">
				Operation Completed
			</div>
			<p>Your ZIP file should download within the next few seconds!</p>
		</div>
	}

	@if (firefoxMessage == true) {
		<div class="ui success message">
			<i class="close icon" onclick="@(() => firefoxMessage = false)"></i>
			<div class="header">
				Firefox Notice:
			</div>
			<p>
				Firefox has some problems right now. Do the following to get your ZIP:<br />
				1. Copy the following URL: <b>@blobUrl</b><br />
				2. Open a new tab (do not use this tab!)<br />
				3. Paste the copied URL into the address bar
			</p>
		</div>
	}

	@if (saveMessage) {
		<div class="ui success message">
			<i class="close icon" onclick="@(() => saveMessage = false)"></i>
			<div class="header">
				Want to redownload in the future?
			</div>
			<p>
				Save the following URL somewhere to immediately have the same packages pre-selected in the future:<br />
			</p>
			<BlazorTable IsResponsive="true" IsSmall="true" IsStriped="true" IsBordered="true">
				<tbody>
					<tr>
						<th scope="row">@saveUrl</th>
					</tr>
				</tbody>
			</BlazorTable>
		</div>
	}

	@if (selectMore) {
		<div class="ui negative message">
			<i class="close icon" onclick="@(() => selectMore = false)"></i>
			<div class="header">
				No packages are selected.
			</div>
		</div>
	}

	<h1 style="text-align:center">@G.manifest.Platforms["switch"].Name</h1>

	@if (!G.initialized) {
		<h2>Page is loading, please wait...</h2>
	} else {

		<div class="docs-example">
			<h3>Select your Custom Firmwares</h3>

			<div class="ui three item menu" style="margin-bottom:2rem">
				@foreach (CFW k in @G.manifest.Platforms["switch"].CFWs) {
					<a class="item @(G.selectedPackages[k.Dependencies[0]] == true ? "active" : "")" onclick="@(() => changeCfwState(k))">@k.DisplayName</a>
				}
			</div>
		</div>




		@if (showOptions() == true) {
			<div class="docs-example">
				<h3 style="margin-bottom:0.5em">Select Options for your Custom Firmwares</h3>
				<Card CardType="CardType.Deck" Class="justify-content-center">
					@foreach (CFW k in @G.manifest.Platforms["switch"].CFWs) {
						if (G.selectedPackages[k.Dependencies[0]] && k.Options != null && k.Options.Any()) {
							<Card style="margin-bottom:2rem">
								<Card CardType="CardType.Body">
									<Card CardType="CardType.Title">@k.Name</Card>
									<div class="ui form">
										@foreach (CFWOption n in k.Options) {
											<div class="inline field" style="margin:0 0 0 1rem">
												<div class="nc3_hover">
													<div class="ui checkbox @(G.selectedPackages[n.dependencies[0]] == true ? "checked" : "")" onclick="@(() => changeCfwOptionState(n))">
														<input type="checkbox" tabindex="0" class="hidden" checked="@(G.selectedPackages[n.dependencies[0]] == true)">
														<label>@n.Name</label>
													</div>
													@if (!G.isMobile) {
														<div class="nc3_tooltip">
															<h4 style="margin:0">@n.Name</h4>
															@if (!String.IsNullOrEmpty(G.packages["switch"][n.dependencies[0]].Authors)) {
																<h6 style="margin-top:0;margin-bottom:0.5rem">by @G.packages["switch"][n.dependencies[0]].Authors</h6>
															}
															<p>@G.packages["switch"][n.dependencies[0]].Description</p>
															@if (!String.IsNullOrEmpty(G.packages["switch"][n.dependencies[0]].Source)) {
																<br /><br /><p>Retrieved from:<br /><a style="color:#DB2828" href="@G.packages["switch"][n.dependencies[0]].Source">@G.packages["switch"][n.dependencies[0]].Source</a></p>
															}
														</div>
													}
												</div>
											</div>
										}
									</div>
								</Card>
							</Card>
						}
					}
				</Card>
				<p style="text-align:center;color:#808080"><b>These modules are powered by <a href="https://github.com/tumGER/SDFilesSwitch">tomGER's SDFilesSwitch</a></b></p>
			</div>
		}

		@foreach (PackageSection sec in G.manifest.Platforms["switch"].PackageSections) {
			if (!sec.Visible) {
				continue;
			}
			<div class="docs-example">
				<h3 style="margin-bottom:0.5em">@sec.DisplayName</h3>
				<Card CardType="CardType.Deck" Class="justify-content-center">
					@foreach (PackageCategory cat in sec.Categories) {
						if (!cat.Visible) {
							continue;
						}

						<Card style="margin-bottom:2rem">
							<Card CardType="CardType.Body">
								<Card CardType="CardType.Title">@cat.DisplayName</Card>
								@foreach (PackageSubcategory sub in cat.Subcategories) {
									if (!sub.Visible) {
										continue;
									}
									<Card CardType="CardType.Subtitle" style="margin-top:0.5rem">@sub.DisplayName</Card>
									<div class="ui form">
										@foreach (Package p in sub.Packages) {
											if (!p.Visible) {
												continue;
											}

											<div class="inline field" style="margin:0 0 0 1rem">
												<div class="nc3_hover">
													<div class="ui checkbox @(G.selectedPackages[p.ID] == true ? "checked" : "")" onclick="@(() => checkClicked(p.ID))">
														<input type="checkbox" tabindex="0" class="hidden" checked="@(G.selectedPackages[p.ID] == true)">
														<label>@p.Name@if (!String.IsNullOrEmpty(p.Version)) {<sub style="color:#b7b7b7"> (@p.Version)</sub>}</label>
													</div>
													@if (!G.isMobile) {
														<div class="nc3_tooltip">
															<h4 style="margin:0">@p.Name</h4>
															<h6 style="margin-top:0;margin-bottom:0.5rem">by @p.Authors</h6>
															<p>@p.Description</p>
															<br /><br /><p>Retrieved from:<br /><a style="color:#DB2828" href="@p.Source">@p.Source</a></p>
														</div>
													}
												</div>
											</div>

										}
									</div>
								}
							</Card>
						</Card>
					}
				</Card>
			</div>
		}

		<button class="fluid ui red button" style="margin-bottom:1.5rem;" onclick="@(() => downloadZip())">Download your ZIP</button>
	}

</div>
} else {
<div class="ui active dimmer" style="height:100%;width:100%">
	<div class="ui massive text loader">
		<div id="infoh" style="margin-bottom:2rem">Downloading your ZIP, please wait...</div>
		@if (barMode == true) {
			<progress Max="@total" Value="@current"></progress>
			<label style="margin-top:0.5rem">Fetching Files (@current/@total)</label>
		} else {
			<progress Max="@total" Value="@current" Color="Color.Success"></progress>
			<label style="margin-top:0.5rem">Zipping Files (@current/@total)</label>
		}
	</div>
	<div class="ui negative message" style="width:90%;position:absolute;bottom:5%">
		<div class="header fluid">
			This might take a while. If the progress stalls for more than a minute, please report it on <a href="https://github.com/noahc3/SDSetup/issues">GitHub</a>
		</div>
	</div>
</div>
}



@functions {

	public static Action ForceUiRefresh;

	public static bool gettingZip = false;

	private static bool zipDoneMessage = false;
	private static bool firefoxMessage = false;
	private static bool saveMessage = false;
	private static bool selectMore = false;

	private static List<string> gottenPackages;

	private static bool b = false;

	private static string blobUrl = "";
	private static string saveUrl = "";

	private static List<string> preenabled;

	static int total = 3;
	static int current = 0;
	static bool barMode = true;

	//Dictionary<string, Package> packages = new Dictionary<string, Package>();


	private bool showOptions() {
		bool show = false;
		foreach (CFW k in @G.manifest.Platforms["switch"].CFWs) {
			if (G.selectedPackages[k.Dependencies[0]] && k.Options != null && k.Options.Any()) {
				show = true;
			}
		}
		return show;
	}

	protected override async Task OnInitAsync() {
		if (ForceUiRefresh == null) {
			ForceUiRefresh = new Action(() => StateHasChanged());
		}
		UriHelper.OnLocationChanged += OnLocationChanged;
	}

	private void OnLocationChanged(object sender, string location) {
		if (G.initialized) {
			G.SelectByUrl(UriHelper.GetAbsoluteUri());
			StateHasChanged();
		}
	}

	private void checkClicked(string id) {
		G.selectedPackages[id] = !G.selectedPackages[id];
		StateHasChanged();
	}

	private void changeCfwState(CFW k) {
		Console.WriteLine(G.selectedPackages[k.Dependencies[0]]);
		G.selectedPackages[k.Dependencies[0]] = !G.selectedPackages[k.Dependencies[0]];
		Console.WriteLine(G.selectedPackages[k.Dependencies[0]]);


		if (G.selectedPackages[k.Dependencies[0]] == false) {
			foreach (string v in k.Dependencies) {
				if (G.selectedPackages.ContainsKey(v)) {
					G.selectedPackages[v] = false;
				}
			}

			foreach (CFWOption o in k.Options) {
				foreach (string v in o.dependencies) {
					if (G.selectedPackages.ContainsKey(v)) {
						G.selectedPackages[v] = false;
					}
				}
			}
		}
		Console.WriteLine(G.selectedPackages[k.Dependencies[0]]);

	}

	private void changeCfwOptionState(CFWOption n) {
		G.selectedPackages[n.dependencies[0]] = !G.selectedPackages[n.dependencies[0]];
		StateHasChanged();
	}




	//TODO: Move this to package

	private List<Tuple<string, string, string>> getArtifacts(Package p) {
		List<Tuple<string, string, string>> artifacts = new List<Tuple<string, string, string>>();
		if (!gottenPackages.Contains(p.ID)) {
			foreach (Artifact a in p.Artifacts) {
				FileInfo fi = new FileInfo(a.Directory);
				string path = fi.DirectoryName;
				if (path.StartsWith("\\") || path.StartsWith("/")) path = path.Substring(1);
				artifacts.Add(new Tuple<string, string, string>(a.URL, path, fi.Name));
			}
			gottenPackages.Add(p.ID);
		}
		foreach (string k in p.Dependencies) artifacts.AddRange(getArtifacts(G.packages["switch"][k]));
		return artifacts;
	}

	[JSInvokable]
	public static void AddProgress() {
		current++;
		ForceUiRefresh();
	}

	// due to many issues, this has to go here and not in global :/
	private async void downloadZip() {

		gettingZip = true;
		zipDoneMessage = false;
		firefoxMessage = false;
		saveMessage = false;
		selectMore = false;
		barMode = true;
		current = 0;

		gottenPackages = new List<string>();

		List<Tuple<string, string, string>> finalArtifacts = new List<Tuple<string, string, string>>();

		//foreach (CFW k in G.manifest.Platforms["switch"].CFWs) {
		//	if (k.Enabled) {
		//		foreach(string p in k.Dependencies) finalArtifacts.AddRange(getArtifacts(G.packages["switch"][p]));
		//		foreach (CFWOption o in k.Options) {
		//			if (o.Enabled) {
		//				foreach (string d in o.dependencies) {
		//					finalArtifacts.AddRange(getArtifacts(G.packages["switch"][d]));
		//				}
		//			}
		//		}
		//	}
		//}

		foreach (KeyValuePair<string, bool> k in G.selectedPackages) {
			if (k.Value) {
				finalArtifacts.AddRange(getArtifacts(G.packages["switch"][k.Key]));
			}
		}

		if (gottenPackages.Count == 0) {
			selectMore = true;
			gettingZip = false;
			StateHasChanged();
			await ZipHelpers.ScrollToTop();
		}

		total = finalArtifacts.Count;

		foreach (Tuple<string, string, string> k in finalArtifacts) {
			int result = await ZipHelpers.AddFile(k.Item1, k.Item2, k.Item3);
			if (result == 2) {
				Console.WriteLine("File download failed, aborting...");
				gettingZip = false;
				zipDoneMessage = true;
				StateHasChanged();
				return;
			}
			current++;
			StateHasChanged();
		}

		barMode = false;
		current = 0;
		StateHasChanged();

		string response = await ZipHelpers.AwaitableGenerateZip();

		saveUrl = UriHelper.GetBaseUri() + "switch#";
		foreach (string k in gottenPackages) {
			saveUrl += k + ";";
		}

		if (String.IsNullOrEmpty(response)) {
			zipDoneMessage = true;
		} else {
			blobUrl = response;
			firefoxMessage = true;
		}
		saveMessage = true;
		gettingZip = false;
		StateHasChanged();
	}

	private string UUID() {
		return new Guid().ToString();
	}
}
