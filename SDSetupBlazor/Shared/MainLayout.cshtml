<!-- Copyright (c) 2018 noahc3
   - This Source Code Form is subject to the terms of the Mozilla Public
   - License, v. 2.0. If a copy of the MPL was not distributed with this
   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
@inherits BlazorLayoutComponent
@inject Microsoft.AspNetCore.Blazor.Services.IUriHelper UriHelper
@inject HttpClient Http

@if (G.initialized) {
	<div class="main" style="min-height:100%;height:auto;width:100%;min-width:100%">
		<div class="pc-tablet-only" style="width:100%;min-width:100%">
			<div class="ui menu @G.manifest.Platforms[G.consoleId].Color" style="width:100%;min-width:100%">
				<a href="/" class="@(GetRelativePath().ToLower() == "" ? "active" : "") item"><img class="ui small image" src="/img/logo.png" style="display:block;margin-left:auto;margin-right:auto" /></a>
				@foreach (Platform k in G.manifest.Platforms.Values) {
					if (!k.Visible) { continue; }
					<a href="/console?@k.ID" class="@(GetRelativePath().ToLower().StartsWith("console?" + k.ID) ? "active" : "") item">@k.MenuName</a>
				}
				<a href="/faq" class="@(GetRelativePath().ToLower() == "faq" ? "active" : "") item">FAQ</a>
				<a href="/credits" class="@(GetRelativePath().ToLower() == "credits" ? "active" : "") item">Credits</a>
				<div class="right menu">
					<a href="https://guide.sdsetup.com" class="ui item">Official Guide</a>
					<a href="https://github.com/noahc3/SDSetup/issues" class="ui item">Issues</a>
					<a href="https://github.com/noahc3/SDSetup" class="ui item"><i class="big github icon"></i></a>
				</div>
			</div>
		</div>

		<div class="mobile-only" style="width:100%">
			<div class="ui vertical menu @G.manifest.Platforms[G.consoleId].Color" style="width:100%">
				<a href="/" class="@(GetRelativePath().ToLower() == "" ? "active" : "") item"><img class="ui small image" src="/img/logo.png" style="display:block;margin-left:auto;margin-right:auto" /></a>
				@foreach (Platform k in G.manifest.Platforms.Values) {
					if (!k.Visible) { continue; }
					<a href="/console?@k.ID" class="@(GetRelativePath().ToLower().StartsWith("console?" + k.ID) ? "active" : "") item">@k.MenuName</a>
				}
				<a href="/faq" class="@(GetRelativePath().ToLower() == "faq" ? "active" : "") item">FAQ</a>
				<a href="/credits" class="@(GetRelativePath().ToLower() == "credits" ? "active" : "") item">Credits</a>
				<a href="https://guide.sdsetup.com" class="ui item">Official Guide</a>
				<a href="https://github.com/noahc3/SDSetup/issues" class="ui item">Issues</a>
				<a href="https://github.com/noahc3/SDSetup" class="ui item">Source on Github</a>
			</div>
		</div>
		

		<div class="container" style="padding-bottom:1.5rem">
			<div class="content px-4">
				@if (!String.IsNullOrEmpty(G.manifest.Message.InnerHTML)) {
					<div class="ui @G.manifest.Message.Color message">
						@((MarkupString)G.manifest.Message.InnerHTML)
					</div>
				}
				@Body
			</div>
		</div>
		<div style="text-align:center;color:#808080;">

			@foreach (string k in G.manifest.Copyright.Split('$')) {
				<b style="text-align:center">@k</b><br />
			}
			<h5 style="text-align:center;color:#d4d4d4;margin-bottom:1.5em;margin-top:0">Manifest Version @G.manifest.Version</h5>

		</div>


	</div>
} else {
	<div class="ui active dimmer" style="height:100%;width:100%">
		<div class="ui massive text loader">Loading</div>
		<div style="width:90%;position:absolute;bottom:5%">
			<div class="ui negative message">
				<div class="header fluid">
					If the page doesn't load, please report it on <a href="https://github.com/noahc3/SDSetup">GitHub</a>
				</div>
			</div>
		</div>
	</div>
}


@functions {

	//public static int browserCompatStatus = 0;

	//public static bool edgeConfirmed = false;

	public static Action ForceUiRefresh;

	protected override async Task OnInitAsync() {
		if (ForceUiRefresh == null) {
			ForceUiRefresh = new Action(() => StateHasChanged());
		}
		if (!G.initialized) {
			//JSRuntime.Current.InvokeAsync<int>("compat.interop_BrowserCompatCheck");
			G.manifest = await Http.GetJsonAsync<Manifest>("/manifest5.json");
			if (!G.selectedPackages.ContainsKey(G.consoleId)) G.selectedPackages[G.consoleId] = new Dictionary<string, bool>();
			if (!G.manifest.Platforms.ContainsKey(G.consoleId)) UriHelper.NavigateTo("");
			G.isMobile = await JSRuntime.Current.InvokeAsync<bool>("mobileAndTabletcheck");
			Console.WriteLine(UriHelper.GetAbsoluteUri());
			G.Init(UriHelper.GetAbsoluteUri());
			G.initialized = true;
			if (Pages.Consoles.ForceUiRefresh != null) Pages.Consoles.ForceUiRefresh();
			if (Pages.Credits.ForceUiUpdate != null) Pages.Credits.ForceUiUpdate();
			StateHasChanged();
		}
	}

	private string GetRelativePath() {
		return UriHelper.ToBaseRelativePath(UriHelper.GetBaseUri(), UriHelper.GetAbsoluteUri());
	}

	//[JSInvokable]
	//public static void BrowserNotCompatible(int val) {
	//	Console.WriteLine("Browser Compat Response: " + val);
	//	browserCompatStatus = val;
	//}
}