@inject LocalStorage localStorage
@inject IJSRuntime  jsRuntime

<div class="ui checkbox @(G.selectedPackages[G.consoleId][PID] == true ? "checked" : "")" @onclick="@(() => checkClicked(PID))">
	<input type="checkbox" tabindex="0" class="hidden" checked="@(G.selectedPackages[G.consoleId][PID] == true)">
	<label>@Name@if (!String.IsNullOrEmpty(Version)) {<sub style="color:#b7b7b7"> (@Version)</sub>}</label>
</div>

@functions  {
[Parameter]
public string PID { get; set; }

[Parameter]
public string Version { get; set; }

[Parameter]
public string Name { get; set; }

private async void checkClicked(string id) {

	//TODO: Currently this will always refresh the page UI if a package is when dependant on this one, whether or not it actually needs to.
	//An ideal optimization would be to verify the page needs to refresh before refreshing.
	if (G.packages[G.consoleId][PID].Warning != null && G.selectedPackages[G.consoleId][PID] == false && await localStorage.GetItem<string>("warn-" + PID) == null) {
		Warning warn = G.packages[G.consoleId][PID].Warning;
		warn.PackageID = PID;
		G.SetCurrentWarning(jsRuntime, warn);
	} else {
		G.selectedPackages[G.consoleId][PID] = !G.selectedPackages[G.consoleId][PID];
		if (G.WhenDependants[G.consoleId].ContainsKey(PID) && G.WhenDependants[G.consoleId][PID].Count > 0) Pages.Consoles.ForceUiRefresh();
		StateHasChanged();
	}
}

protected override async Task OnInitializedAsync() {
	G.SelectionRefreshes[PID] = new Action(() => StateHasChanged());
}
}