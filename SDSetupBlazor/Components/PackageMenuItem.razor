@inject LocalStorage localStorage
@inject IJSRuntime  jsRuntime

<BSNavItem>
    <BSNavLink @bind-IsActive="G.selectedPackages[G.consoleId][PID]" @onclick="@(() => checkClicked(PID))">

        <BSRow style="width:200px;border:none;margin:auto;line-height:1;padding:5px;">
            <BSCol XS="1" style="padding:0;font-size:xx-large;">
                @if (G.selectedPackages[G.consoleId][PID]) {
                    <span>☑</span>
                } else {
                    <span>☐</span>
                }
            </BSCol>
            <BSCol XS="11" style="padding:0;">
                <span>@DisplayName@if (!String.IsNullOrEmpty(Version)) {<div style="color:#b7b7b7;margin-top:3px;">(@Version)</div>}</span>
            </BSCol>
        </BSRow>
    </BSNavLink>
</BSNavItem>
 
@functions  {

    private string _DisplayName;

    [Parameter]
    public string PID { get; set; }

    [Parameter]
    public string DisplayName {
        get {
            return _DisplayName;
        }
        set {
            _DisplayName = value;
        }
    }

    [Parameter]
    public string Version { get; set; }



    protected override void OnAfterRender(bool firstRender) {
        if (firstRender) {
            StateHasChanged();
        }
    }

    private async void checkClicked(string id) {
        //TODO: Currently this will always refresh the page UI if a package is when dependant on this one, whether or not it actually needs to.
        //An ideal optimization would be to verify the page needs to refresh before refreshing.
        if (G.packages[G.consoleId][PID].Warning != null && G.selectedPackages[G.consoleId][PID] == false && localStorage.GetItem("warn-" + PID) == null) {
            Warning warn = G.packages[G.consoleId][PID].Warning;
            warn.PackageID = PID;
            G.SetCurrentWarning(jsRuntime, warn);
        } else {
            G.selectedPackages[G.consoleId][PID] = !G.selectedPackages[G.consoleId][PID];
            if (G.WhenDependants[G.consoleId].ContainsKey(PID) && G.WhenDependants[G.consoleId][PID].Count > 0) Pages.Consoles.ForceUiRefresh();
            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync() {
        G.SelectionRefreshes[PID] = new Action(() => StateHasChanged());
    }
}