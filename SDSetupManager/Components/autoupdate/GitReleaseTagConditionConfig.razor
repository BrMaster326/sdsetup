@using SDSetupCommon.Data.UpdaterModels
@inherits ComponentBase

@if (Globals.Authenticated) {
    <BSCard CardType="CardType.Card">
        <a href="javascript:void(0);" @onclick="@ToggleCollapse">
            <BSCard CardType="CardType.Header">
                Git Release Tag Condition (@Condition.repoAuthor/@Condition.repoName)
            </BSCard>
        </a>
        <BSCard CardType="CardType.Body" Class="@(collapsed ? "collapse" : "")">
            <BSCard CardType="CardType.Text">
                This condition will check if the tag of the latest release for a specified GitHub/GitLab repository is different than it was the last time an automatic update was triggered.
                <ul>
                    <li>This checks if a tag is <b>different</b>, meaning if SDSetup grabs a release and then you delete that release, SDSetup will downgrade back to the release now considered latest.</li>
                    <li>Since this condition checks tags, shadow updates won't be detected. If you do shadow updates, consider using a "Git Release Data Changed" condition instead to also check for changes to release artifact filenames.</li>
                </ul>
            </BSCard>
            <BSBasicForm>
                <BSFormLabel>Platform</BSFormLabel>
                <BSDropdown>
                    <BSDropdownToggle>@Condition.gitReleaseSource</BSDropdownToggle>
                    <BSDropdownMenu>
                        @foreach (GitReleaseSource _src in (GitReleaseSource[])Enum.GetValues(typeof(GitReleaseSource))) {
                            GitReleaseSource src = _src;
                            string k = src.ToString();
                            <BSDropdownItem Href="javascript:void(0);" OnClick="@(() => { SetReleaseSource(src); })">@k</BSDropdownItem>
                        }
                    </BSDropdownMenu>
                </BSDropdown>

                <BSFormLabel>Release Type</BSFormLabel>
                <BSDropdown>
                    <BSDropdownToggle>@Condition.gitReleaseType</BSDropdownToggle>
                    <BSDropdownMenu>
                        @foreach (GitReleaseType _type in (GitReleaseType[])Enum.GetValues(typeof(GitReleaseType))) {
                            GitReleaseType type = _type;
                            string k = type.ToString();
                            <BSDropdownItem Href="javascript:void(0);" OnClick="@(() => { SetReleaseType(type); })">@k</BSDropdownItem>
                        }
                    </BSDropdownMenu>
                </BSDropdown>

                <BSFormLabel>Repo Owner</BSFormLabel>
                <BSBasicInput InputType="InputType.Text" @bind-Value="@Condition.repoAuthor"></BSBasicInput>

                <BSFormLabel>Repo Name</BSFormLabel>
                <BSBasicInput InputType="InputType.Text" @bind-Value="@Condition.repoName"></BSBasicInput>
            </BSBasicForm>
        </BSCard>
    </BSCard>
}

@code {
    [Parameter]
    public GitReleaseTagCondition Condition { get; set; }

    private bool collapsed = true;

    private void ToggleCollapse() {
        collapsed = !collapsed;
    }

    private void SetReleaseSource(GitReleaseSource src) {
        Condition.gitReleaseSource = src;
        StateHasChanged();
    }

    private void SetReleaseType(GitReleaseType type) {
        Condition.gitReleaseType = type;
        StateHasChanged();
    }
}